// Generated by gencpp from file tutorial_vision/CircleInfo.msg
// DO NOT EDIT!


#ifndef TUTORIAL_VISION_MESSAGE_CIRCLEINFO_H
#define TUTORIAL_VISION_MESSAGE_CIRCLEINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tutorial_vision
{
template <class ContainerAllocator>
struct CircleInfo_
{
  typedef CircleInfo_<ContainerAllocator> Type;

  CircleInfo_()
    : center_x(0.0)
    , center_y(0.0)
    , radius(0.0)  {
    }
  CircleInfo_(const ContainerAllocator& _alloc)
    : center_x(0.0)
    , center_y(0.0)
    , radius(0.0)  {
  (void)_alloc;
    }



   typedef double _center_x_type;
  _center_x_type center_x;

   typedef double _center_y_type;
  _center_y_type center_y;

   typedef double _radius_type;
  _radius_type radius;





  typedef boost::shared_ptr< ::tutorial_vision::CircleInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tutorial_vision::CircleInfo_<ContainerAllocator> const> ConstPtr;

}; // struct CircleInfo_

typedef ::tutorial_vision::CircleInfo_<std::allocator<void> > CircleInfo;

typedef boost::shared_ptr< ::tutorial_vision::CircleInfo > CircleInfoPtr;
typedef boost::shared_ptr< ::tutorial_vision::CircleInfo const> CircleInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tutorial_vision::CircleInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tutorial_vision::CircleInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tutorial_vision::CircleInfo_<ContainerAllocator1> & lhs, const ::tutorial_vision::CircleInfo_<ContainerAllocator2> & rhs)
{
  return lhs.center_x == rhs.center_x &&
    lhs.center_y == rhs.center_y &&
    lhs.radius == rhs.radius;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tutorial_vision::CircleInfo_<ContainerAllocator1> & lhs, const ::tutorial_vision::CircleInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tutorial_vision

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tutorial_vision::CircleInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tutorial_vision::CircleInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tutorial_vision::CircleInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tutorial_vision::CircleInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tutorial_vision::CircleInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tutorial_vision::CircleInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tutorial_vision::CircleInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "28a09b8c5ded5c4af6b7db31b0bee222";
  }

  static const char* value(const ::tutorial_vision::CircleInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x28a09b8c5ded5c4aULL;
  static const uint64_t static_value2 = 0xf6b7db31b0bee222ULL;
};

template<class ContainerAllocator>
struct DataType< ::tutorial_vision::CircleInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tutorial_vision/CircleInfo";
  }

  static const char* value(const ::tutorial_vision::CircleInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tutorial_vision::CircleInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 center_x\n"
"float64 center_y\n"
"float64 radius\n"
;
  }

  static const char* value(const ::tutorial_vision::CircleInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tutorial_vision::CircleInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.center_x);
      stream.next(m.center_y);
      stream.next(m.radius);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CircleInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tutorial_vision::CircleInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tutorial_vision::CircleInfo_<ContainerAllocator>& v)
  {
    s << indent << "center_x: ";
    Printer<double>::stream(s, indent + "  ", v.center_x);
    s << indent << "center_y: ";
    Printer<double>::stream(s, indent + "  ", v.center_y);
    s << indent << "radius: ";
    Printer<double>::stream(s, indent + "  ", v.radius);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TUTORIAL_VISION_MESSAGE_CIRCLEINFO_H
